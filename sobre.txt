ROADMAP
|-> Estado da web hoje
  |-> O que é JS
  |-> Integração com APIs do navegador
  |-> Problemas de performance
    |-> Linguagem interpretada
    |-> cache inteligente, mas custoso
    |-> Garbage collector
|-> O WASM
  |-> Evolução da plataforma
  |-> asm.js/WASM
  |-> Fundação mozilla e sobre
  |-> Premissas
  |-> Qualquer linguagem compila para um bytecode (assembly) unico que todos os navegadores reconhecem
    |-> Padrão
  |-> Compiladores ao invés de irem para um instruction set X, vão para WASM 
  |-> Otimizações (-O3, exemplo)
    |-> Feito pelo compilador
        |-> Como compilador funciona (legal falar, separar)
|-> Suporte da comunidade
  |-> Casos de uso/sucesso
|-> Explicar a interface WASM/JS

WebAssembly
|-> O que é (a cara dele)
  |-> Código compilado bytecode lido pelo navegador
    |-> Bytes
    |-> Carregados em runtime
    |-> Rodados pelo navegador
  |-> Module, CCall, CModule
    |-> Flags de compilação
    |-> Expõem interfaces no .js que permite chamar os módulos em C



|-> POC (Performance)
  |-> Fazer um programa em C (gcc preWASM.cpp -o preWASM.out)
  |-> Executar e ver os times
  |-> Fazer em JS
  |-> Executar e ver os times
  |-> WASM
  |-> Compilando
    |-> source ./emsdk_env.sh --build=Release
    |-> emcc main.cpp -o main.js --std=c++11 -s "EXPORTED_FUNCTIONS=['_square']" //e outras variações que vamos falar mais pra frente
  |-> Executar e ver os times
  |-> Executando
    |-> Primeira vez o WASM demora pra executar
    |-> Depois ele cacheia e vai BEM mais rápido
    |-> JS também cacheia, mas em runtime ele gera perfis das funções em uma espécie de Bytecode (otimizado, varia de engine V8) 


|-> Agora bora fazer o repl.it
|-> Lua (Còdigo existente para WebAssembly) (lua.c)
  |-> Mostrar como é Lua e como funciona
  |-> Compilar o interpretador Lua na mão (usando um pouco da Lua API em C:https://www.lua.org/pil/24.1.html)
    |-> Esse cara chama um pouco da Lua API para ler da entrada e chamar a engine lua programaticamente
    |-> Vamos wrappar ele, modificar um pouco, e expor para o WASM conseguir chamar também programaticamente!
  |-> Executar nossa função nele (gcc src/*.c -lm -o luaC.out)
  |-> Compilar para WASM (emcc src/*.c -lm -o main.js -s NO_EXIT_RUNTIME=1 -s "EXTRA_EXPORTED_RUNTIME_METHODS=['ccall']" -s "EXPORTED_FUNCTIONS=['_main', '_runString']")
    |-> Modificações necessárias porque agora tem passagem de valor entre eles
  |-> Executar Lua no Browser